def COLOR_MAP = [
    'SUCCESS': 'good',  // good stands for the color green in Slack
    'FAILURE': 'danger' // danger stands for the color red in Slack
]

pipeline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }
    options{
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '10', daysToKeepStr: '', numToKeepStr: '10')
    }
    environment{
        AWS_DEFAULT_REGION = 'us-east-1'
        appImageName = '966996441247.dkr.ecr.us-east-1.amazonaws.com/vprofile'            // registryUrl/image-name
        vprofileRegistry = '966996441247.dkr.ecr.us-east-1.amazonaws.com'       // registryUrl
        cluster = "vprofile"      // cluster name
        service = "vprofile-app-svc"   // service name to run the container
    }
    stages {
        stage('Fetch code'){
            steps {
                git branch: 'docker', url: 'https://github.com/owusukd/vprofile-project.git'
            }
            post {
                success {
                    echo 'Fetch Successful!'
                }
            }
        }
        stage('Unit Test'){
            steps {
                sh 'mvn test'
            }
            post {
                success {
                    echo 'Unit test successful'
                }
            }
        }
        stage('Integration Test'){
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
            post {
                success {
                    echo 'Integration test successful'
                }
            }
        }
        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Checkstyle Report'
                }
            }
        }
        stage('SonarQube Analysis'){
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonarQube'){
                    sh ''' ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }
        stage('Quality Gate'){
            steps {
                timeout(time: 1, unit: 'HOURS'){
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build & Upload Image to AWS ECR & Deploy to ECS') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'devops-aws-registry',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]){
                        sh '''
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $vprofileRegistry
                            docker build -t vprofile ./Docker-files/app/multistage/
                            docker tag vprofile:latest $appImageName:latest
                            docker push $appImageName:latest
                            aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment
                        '''
                }
            }
        }
    }
    post { 
        always {
            echo 'Slack Notifications'
            slackSend channel: '#jenkinscicd',
                      color: COLOR_MAP[currentBuild.currentResult], 
                      message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"           
        }
    }
}
